{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n// error FundMe__NotOwner();\nerror FundMe__NotOwner();\ncontract FundMe {\n\n//type decleration\n        using  PriceConverter for uint256;\n    //state variables\n        uint256 public constant MINIMUM_USD =50 * 1e18;\n        address[] private s_funders;\n        mapping(address => uint256) public s_addressToAmountFunded;\n        address private immutable i_OWNER;\n        AggregatorV3Interface private s_priceFeed;\n\n// modifier\n        modifier onlyOwner() {\n        // require(msg.sender == i_OWNER);\n        if (msg.sender != i_OWNER) revert FundMe__NotOwner();\n        _;\n    }\n\n        constructor(address s_priceFeedAddress) {\n        i_OWNER = msg.sender;\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\n    }\n\n\nfunction fund() public payable {\n    require(\n      msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n      'Not enough eth'\n    );\n    s_addressToAmountFunded[msg.sender] += msg.value;\n    s_funders.push(msg.sender);\n  }\n\n\nfunction withdraw ()public onlyOwner{\n\nfor (uint256 funderIndex = 0; funderIndex < s_funders.length ; funderIndex++) \n{\n        address funder =  s_funders[funderIndex];\n        s_addressToAmountFunded[funder] = 0 ;     }\n\n //reset the array    \ns_funders = new address [](0);\n//actually withdraw funds\n(bool success, ) =  i_OWNER.call{value: address(this).balance}(\"\");require(success);\n}\n\n\nfunction cheaperWithdraw()public onlyOwner{\n        //assign the  s_funders storage varible  to memmory variable\n        address[] memory funders = s_funders;\n        for(uint256 funderIndex = 0; funders.length< funderIndex;funderIndex++){\n                address funder = funders[funderIndex];\n                 s_addressToAmountFunded[funder]=0;     }\n\n                 s_funders = new address [](0);\n(bool success, ) =  i_OWNER.call{value: address(this).balance}(\"\");require(success);\n}\n\n\n\n\n// view funtions\n/** @notice Gets the amount that an address has funded\n     *  @param fundingAddress the address of the funder\n     *  @return the amount funded\n     */\n\nfunction getAddressToAmountFunded(address fundingAddress)public view returns(uint256){\n   return s_addressToAmountFunded[fundingAddress];\n}\n\nfunction getOwner()public view returns(address){\n return i_OWNER;\n}\nfunction getFunders(uint256 index)public view returns(address){\n        return s_funders[index];\n}\n\nfunction getPriceFeed()public view returns(AggregatorV3Interface){\n  return s_priceFeed;\n}\n\n// receive() external payable {\n//         fund();\n// }\n\n// fallback() external payable {\n//         fund();\n// }\n\n\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n\r\nlibrary PriceConverter {\r\n\r\n\r\nfunction getPrice(AggregatorV3Interface priceFeed) internal  view  returns(uint256){\r\n//ABI\r\n//address 0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n\r\n  (,int price,,,)=priceFeed.latestRoundData();\r\n return uint256(price * 1e10);\r\n\r\n\r\n}\r\n\r\nfunction getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed)internal  view returns (uint256){\r\nuint256 ethPrice = getPrice(priceFeed);\r\n\r\nuint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\nreturn ethAmountInUsd;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}