{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n\ncontract FundMe {\n\n        using  PriceConverter for uint256;\n    \n        uint256 public constant MINIMUM_USD =50 * 1e18;\n        address[] public funders;\n        mapping(address => uint256) public addressToAmountFunded;\n\n        address public immutable i_OWNER;\n        AggregatorV3Interface public priceFeed;\n\n        constructor(address priceFeedAddress) {\n        i_OWNER = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n\nfunction fund() public payable  {\n\nrequire(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\"Didn't send enough\");\nfunders.push(msg.sender);\naddressToAmountFunded[msg.sender]  += msg.value;\n\n}\n\n\nfunction withdraw ()public onlyOwner{\n\nfor (uint256 funderIndex = 0; funderIndex < funders.length ; funderIndex++) \n{\n        address funder =  funders[funderIndex];\n        addressToAmountFunded[funder] = 0 ;     }\n\n //rest the array    \nfunders = new address [](0);\n//actually withdraw funds\n(bool callSuccess,)=payable(msg.sender).call{value:address(this).balance}(\"\");\nrequire(callSuccess,\"call failed\");\n\n\n}\n\nmodifier onlyOwner{\n        require(msg.sender == i_OWNER,\"sender is not owner!\");\n        _;\n}\n\nreceive() external payable {\n        fund();\n}\n\nfallback() external payable {\n        fund();\n}\n\n\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n\r\nlibrary PriceConverter {\r\n\r\n\r\nfunction getPrice(AggregatorV3Interface priceFeed) internal  view  returns(uint256){\r\n//ABI\r\n//address 0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n\r\n  (,int price,,,)=priceFeed.latestRoundData();\r\n return uint256(price * 1e10);\r\n\r\n\r\n}\r\n\r\nfunction getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed)internal  view returns (uint256){\r\nuint256 ethPrice = getPrice(priceFeed);\r\n\r\nuint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\nreturn ethAmountInUsd;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}